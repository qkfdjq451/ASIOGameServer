// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBMONSTER_FB_H_
#define FLATBUFFERS_GENERATED_FBMONSTER_FB_H_

#include "flatbuffers/flatbuffers.h"

#include "FB_generated.h"

namespace FB {

struct Monster;

struct Monster FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CODE = 4,
    VT_NUMBER = 6,
    VT_NICK = 8,
    VT_POSITION = 10,
    VT_CURRENTHP = 12,
    VT_MAXHP = 14,
    VT_POWER = 16,
    VT_SPEED = 18
  };
  int32_t code() const {
    return GetField<int32_t>(VT_CODE, 0);
  }
  int32_t number() const {
    return GetField<int32_t>(VT_NUMBER, 0);
  }
  const flatbuffers::String *nick() const {
    return GetPointer<const flatbuffers::String *>(VT_NICK);
  }
  const Vec3 *position() const {
    return GetStruct<const Vec3 *>(VT_POSITION);
  }
  float CurrentHP() const {
    return GetField<float>(VT_CURRENTHP, 0.0f);
  }
  float MaxHp() const {
    return GetField<float>(VT_MAXHP, 0.0f);
  }
  float power() const {
    return GetField<float>(VT_POWER, 0.0f);
  }
  float speed() const {
    return GetField<float>(VT_SPEED, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CODE) &&
           VerifyField<int32_t>(verifier, VT_NUMBER) &&
           VerifyOffset(verifier, VT_NICK) &&
           verifier.Verify(nick()) &&
           VerifyField<Vec3>(verifier, VT_POSITION) &&
           VerifyField<float>(verifier, VT_CURRENTHP) &&
           VerifyField<float>(verifier, VT_MAXHP) &&
           VerifyField<float>(verifier, VT_POWER) &&
           VerifyField<float>(verifier, VT_SPEED) &&
           verifier.EndTable();
  }
};

struct MonsterBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_code(int32_t code) {
    fbb_.AddElement<int32_t>(Monster::VT_CODE, code, 0);
  }
  void add_number(int32_t number) {
    fbb_.AddElement<int32_t>(Monster::VT_NUMBER, number, 0);
  }
  void add_nick(flatbuffers::Offset<flatbuffers::String> nick) {
    fbb_.AddOffset(Monster::VT_NICK, nick);
  }
  void add_position(const Vec3 *position) {
    fbb_.AddStruct(Monster::VT_POSITION, position);
  }
  void add_CurrentHP(float CurrentHP) {
    fbb_.AddElement<float>(Monster::VT_CURRENTHP, CurrentHP, 0.0f);
  }
  void add_MaxHp(float MaxHp) {
    fbb_.AddElement<float>(Monster::VT_MAXHP, MaxHp, 0.0f);
  }
  void add_power(float power) {
    fbb_.AddElement<float>(Monster::VT_POWER, power, 0.0f);
  }
  void add_speed(float speed) {
    fbb_.AddElement<float>(Monster::VT_SPEED, speed, 0.0f);
  }
  explicit MonsterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MonsterBuilder &operator=(const MonsterBuilder &);
  flatbuffers::Offset<Monster> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Monster>(end);
    return o;
  }
};

inline flatbuffers::Offset<Monster> CreateMonster(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t code = 0,
    int32_t number = 0,
    flatbuffers::Offset<flatbuffers::String> nick = 0,
    const Vec3 *position = 0,
    float CurrentHP = 0.0f,
    float MaxHp = 0.0f,
    float power = 0.0f,
    float speed = 0.0f) {
  MonsterBuilder builder_(_fbb);
  builder_.add_speed(speed);
  builder_.add_power(power);
  builder_.add_MaxHp(MaxHp);
  builder_.add_CurrentHP(CurrentHP);
  builder_.add_position(position);
  builder_.add_nick(nick);
  builder_.add_number(number);
  builder_.add_code(code);
  return builder_.Finish();
}

inline flatbuffers::Offset<Monster> CreateMonsterDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t code = 0,
    int32_t number = 0,
    const char *nick = nullptr,
    const Vec3 *position = 0,
    float CurrentHP = 0.0f,
    float MaxHp = 0.0f,
    float power = 0.0f,
    float speed = 0.0f) {
  return FB::CreateMonster(
      _fbb,
      code,
      number,
      nick ? _fbb.CreateString(nick) : 0,
      position,
      CurrentHP,
      MaxHp,
      power,
      speed);
}

inline const FB::Monster *GetMonster(const void *buf) {
  return flatbuffers::GetRoot<FB::Monster>(buf);
}

inline const FB::Monster *GetSizePrefixedMonster(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FB::Monster>(buf);
}

inline bool VerifyMonsterBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FB::Monster>(nullptr);
}

inline bool VerifySizePrefixedMonsterBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FB::Monster>(nullptr);
}

inline void FinishMonsterBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FB::Monster> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMonsterBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FB::Monster> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FB

#endif  // FLATBUFFERS_GENERATED_FBMONSTER_FB_H_
