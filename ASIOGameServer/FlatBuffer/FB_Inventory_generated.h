// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBINVENTORY_FB_H_
#define FLATBUFFERS_GENERATED_FBINVENTORY_FB_H_

#include "flatbuffers/flatbuffers.h"

#include "FB_generated.h"
#include "FB_Slot_generated.h"

namespace FB {

struct Inventory;

struct Inventory FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SLOT_VEC = 4,
    VT_MONEY = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<Slot>> *slot_vec() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Slot>> *>(VT_SLOT_VEC);
  }
  int32_t money() const {
    return GetField<int32_t>(VT_MONEY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SLOT_VEC) &&
           verifier.Verify(slot_vec()) &&
           verifier.VerifyVectorOfTables(slot_vec()) &&
           VerifyField<int32_t>(verifier, VT_MONEY) &&
           verifier.EndTable();
  }
};

struct InventoryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_slot_vec(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Slot>>> slot_vec) {
    fbb_.AddOffset(Inventory::VT_SLOT_VEC, slot_vec);
  }
  void add_money(int32_t money) {
    fbb_.AddElement<int32_t>(Inventory::VT_MONEY, money, 0);
  }
  explicit InventoryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  InventoryBuilder &operator=(const InventoryBuilder &);
  flatbuffers::Offset<Inventory> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Inventory>(end);
    return o;
  }
};

inline flatbuffers::Offset<Inventory> CreateInventory(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Slot>>> slot_vec = 0,
    int32_t money = 0) {
  InventoryBuilder builder_(_fbb);
  builder_.add_money(money);
  builder_.add_slot_vec(slot_vec);
  return builder_.Finish();
}

inline flatbuffers::Offset<Inventory> CreateInventoryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Slot>> *slot_vec = nullptr,
    int32_t money = 0) {
  return FB::CreateInventory(
      _fbb,
      slot_vec ? _fbb.CreateVector<flatbuffers::Offset<Slot>>(*slot_vec) : 0,
      money);
}

inline const FB::Inventory *GetInventory(const void *buf) {
  return flatbuffers::GetRoot<FB::Inventory>(buf);
}

inline const FB::Inventory *GetSizePrefixedInventory(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FB::Inventory>(buf);
}

inline bool VerifyInventoryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FB::Inventory>(nullptr);
}

inline bool VerifySizePrefixedInventoryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FB::Inventory>(nullptr);
}

inline void FinishInventoryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FB::Inventory> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedInventoryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FB::Inventory> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FB

#endif  // FLATBUFFERS_GENERATED_FBINVENTORY_FB_H_
