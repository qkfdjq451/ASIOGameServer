// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBDAMAGE_FB_H_
#define FLATBUFFERS_GENERATED_FBDAMAGE_FB_H_

#include "flatbuffers/flatbuffers.h"

#include "FB_generated.h"

namespace FB {

struct Damage;

struct Damage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ATTACKER_CODE = 4,
    VT_ATTACKER_TYPE = 6,
    VT_DAMAGED_CODE = 8,
    VT_DAMAGED_TYPE = 10,
    VT_ATTACKTYPE = 12,
    VT_DAMAGE = 14,
    VT_CURRENTHP = 16
  };
  int16_t attacker_code() const {
    return GetField<int16_t>(VT_ATTACKER_CODE, 0);
  }
  PlayerType attacker_type() const {
    return static_cast<PlayerType>(GetField<int8_t>(VT_ATTACKER_TYPE, 0));
  }
  int16_t damaged_code() const {
    return GetField<int16_t>(VT_DAMAGED_CODE, 0);
  }
  PlayerType damaged_type() const {
    return static_cast<PlayerType>(GetField<int8_t>(VT_DAMAGED_TYPE, 0));
  }
  AttackState attackType() const {
    return static_cast<AttackState>(GetField<int8_t>(VT_ATTACKTYPE, 0));
  }
  float damage() const {
    return GetField<float>(VT_DAMAGE, 0.0f);
  }
  float currentHP() const {
    return GetField<float>(VT_CURRENTHP, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_ATTACKER_CODE) &&
           VerifyField<int8_t>(verifier, VT_ATTACKER_TYPE) &&
           VerifyField<int16_t>(verifier, VT_DAMAGED_CODE) &&
           VerifyField<int8_t>(verifier, VT_DAMAGED_TYPE) &&
           VerifyField<int8_t>(verifier, VT_ATTACKTYPE) &&
           VerifyField<float>(verifier, VT_DAMAGE) &&
           VerifyField<float>(verifier, VT_CURRENTHP) &&
           verifier.EndTable();
  }
};

struct DamageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_attacker_code(int16_t attacker_code) {
    fbb_.AddElement<int16_t>(Damage::VT_ATTACKER_CODE, attacker_code, 0);
  }
  void add_attacker_type(PlayerType attacker_type) {
    fbb_.AddElement<int8_t>(Damage::VT_ATTACKER_TYPE, static_cast<int8_t>(attacker_type), 0);
  }
  void add_damaged_code(int16_t damaged_code) {
    fbb_.AddElement<int16_t>(Damage::VT_DAMAGED_CODE, damaged_code, 0);
  }
  void add_damaged_type(PlayerType damaged_type) {
    fbb_.AddElement<int8_t>(Damage::VT_DAMAGED_TYPE, static_cast<int8_t>(damaged_type), 0);
  }
  void add_attackType(AttackState attackType) {
    fbb_.AddElement<int8_t>(Damage::VT_ATTACKTYPE, static_cast<int8_t>(attackType), 0);
  }
  void add_damage(float damage) {
    fbb_.AddElement<float>(Damage::VT_DAMAGE, damage, 0.0f);
  }
  void add_currentHP(float currentHP) {
    fbb_.AddElement<float>(Damage::VT_CURRENTHP, currentHP, 0.0f);
  }
  explicit DamageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DamageBuilder &operator=(const DamageBuilder &);
  flatbuffers::Offset<Damage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Damage>(end);
    return o;
  }
};

inline flatbuffers::Offset<Damage> CreateDamage(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t attacker_code = 0,
    PlayerType attacker_type = PlayerType_Player,
    int16_t damaged_code = 0,
    PlayerType damaged_type = PlayerType_Player,
    AttackState attackType = AttackState_Combo1,
    float damage = 0.0f,
    float currentHP = 0.0f) {
  DamageBuilder builder_(_fbb);
  builder_.add_currentHP(currentHP);
  builder_.add_damage(damage);
  builder_.add_damaged_code(damaged_code);
  builder_.add_attacker_code(attacker_code);
  builder_.add_attackType(attackType);
  builder_.add_damaged_type(damaged_type);
  builder_.add_attacker_type(attacker_type);
  return builder_.Finish();
}

inline const FB::Damage *GetDamage(const void *buf) {
  return flatbuffers::GetRoot<FB::Damage>(buf);
}

inline const FB::Damage *GetSizePrefixedDamage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FB::Damage>(buf);
}

inline bool VerifyDamageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FB::Damage>(nullptr);
}

inline bool VerifySizePrefixedDamageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FB::Damage>(nullptr);
}

inline void FinishDamageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FB::Damage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDamageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FB::Damage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FB

#endif  // FLATBUFFERS_GENERATED_FBDAMAGE_FB_H_
