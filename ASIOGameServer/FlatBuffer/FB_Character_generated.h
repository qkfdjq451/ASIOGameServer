// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBCHARACTER_FB_H_
#define FLATBUFFERS_GENERATED_FBCHARACTER_FB_H_

#include "flatbuffers/flatbuffers.h"

#include "FB_generated.h"

namespace FB {

struct Character;

struct Character FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CODE = 4,
    VT_TYPE = 6,
    VT_NICK = 8,
    VT_POSITION = 10,
    VT_LEVEL = 12,
    VT_HP = 14,
    VT_POWER = 16,
    VT_SPEED = 18,
    VT_MAPCODE = 20
  };
  int32_t code() const {
    return GetField<int32_t>(VT_CODE, 0);
  }
  CharacterType type() const {
    return static_cast<CharacterType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const flatbuffers::String *nick() const {
    return GetPointer<const flatbuffers::String *>(VT_NICK);
  }
  const Vec3 *position() const {
    return GetStruct<const Vec3 *>(VT_POSITION);
  }
  int32_t level() const {
    return GetField<int32_t>(VT_LEVEL, 0);
  }
  float hp() const {
    return GetField<float>(VT_HP, 0.0f);
  }
  float power() const {
    return GetField<float>(VT_POWER, 0.0f);
  }
  float speed() const {
    return GetField<float>(VT_SPEED, 0.0f);
  }
  int32_t mapcode() const {
    return GetField<int32_t>(VT_MAPCODE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CODE) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_NICK) &&
           verifier.Verify(nick()) &&
           VerifyField<Vec3>(verifier, VT_POSITION) &&
           VerifyField<int32_t>(verifier, VT_LEVEL) &&
           VerifyField<float>(verifier, VT_HP) &&
           VerifyField<float>(verifier, VT_POWER) &&
           VerifyField<float>(verifier, VT_SPEED) &&
           VerifyField<int32_t>(verifier, VT_MAPCODE) &&
           verifier.EndTable();
  }
};

struct CharacterBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_code(int32_t code) {
    fbb_.AddElement<int32_t>(Character::VT_CODE, code, 0);
  }
  void add_type(CharacterType type) {
    fbb_.AddElement<int8_t>(Character::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_nick(flatbuffers::Offset<flatbuffers::String> nick) {
    fbb_.AddOffset(Character::VT_NICK, nick);
  }
  void add_position(const Vec3 *position) {
    fbb_.AddStruct(Character::VT_POSITION, position);
  }
  void add_level(int32_t level) {
    fbb_.AddElement<int32_t>(Character::VT_LEVEL, level, 0);
  }
  void add_hp(float hp) {
    fbb_.AddElement<float>(Character::VT_HP, hp, 0.0f);
  }
  void add_power(float power) {
    fbb_.AddElement<float>(Character::VT_POWER, power, 0.0f);
  }
  void add_speed(float speed) {
    fbb_.AddElement<float>(Character::VT_SPEED, speed, 0.0f);
  }
  void add_mapcode(int32_t mapcode) {
    fbb_.AddElement<int32_t>(Character::VT_MAPCODE, mapcode, 0);
  }
  explicit CharacterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CharacterBuilder &operator=(const CharacterBuilder &);
  flatbuffers::Offset<Character> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Character>(end);
    return o;
  }
};

inline flatbuffers::Offset<Character> CreateCharacter(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t code = 0,
    CharacterType type = CharacterType_Sinbi,
    flatbuffers::Offset<flatbuffers::String> nick = 0,
    const Vec3 *position = 0,
    int32_t level = 0,
    float hp = 0.0f,
    float power = 0.0f,
    float speed = 0.0f,
    int32_t mapcode = 0) {
  CharacterBuilder builder_(_fbb);
  builder_.add_mapcode(mapcode);
  builder_.add_speed(speed);
  builder_.add_power(power);
  builder_.add_hp(hp);
  builder_.add_level(level);
  builder_.add_position(position);
  builder_.add_nick(nick);
  builder_.add_code(code);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Character> CreateCharacterDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t code = 0,
    CharacterType type = CharacterType_Sinbi,
    const char *nick = nullptr,
    const Vec3 *position = 0,
    int32_t level = 0,
    float hp = 0.0f,
    float power = 0.0f,
    float speed = 0.0f,
    int32_t mapcode = 0) {
  return FB::CreateCharacter(
      _fbb,
      code,
      type,
      nick ? _fbb.CreateString(nick) : 0,
      position,
      level,
      hp,
      power,
      speed,
      mapcode);
}

inline const FB::Character *GetCharacter(const void *buf) {
  return flatbuffers::GetRoot<FB::Character>(buf);
}

inline const FB::Character *GetSizePrefixedCharacter(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FB::Character>(buf);
}

inline bool VerifyCharacterBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FB::Character>(nullptr);
}

inline bool VerifySizePrefixedCharacterBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FB::Character>(nullptr);
}

inline void FinishCharacterBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FB::Character> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCharacterBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FB::Character> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FB

#endif  // FLATBUFFERS_GENERATED_FBCHARACTER_FB_H_
