// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBDAMAGEVEC_FB_H_
#define FLATBUFFERS_GENERATED_FBDAMAGEVEC_FB_H_

#include "flatbuffers/flatbuffers.h"

#include "FB_generated.h"
#include "FB_Damage_generated.h"

namespace FB {

struct DamageVec;

struct DamageVec FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DAMAGEVECTOR = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Damage>> *damagevector() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Damage>> *>(VT_DAMAGEVECTOR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DAMAGEVECTOR) &&
           verifier.Verify(damagevector()) &&
           verifier.VerifyVectorOfTables(damagevector()) &&
           verifier.EndTable();
  }
};

struct DamageVecBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_damagevector(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Damage>>> damagevector) {
    fbb_.AddOffset(DamageVec::VT_DAMAGEVECTOR, damagevector);
  }
  explicit DamageVecBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DamageVecBuilder &operator=(const DamageVecBuilder &);
  flatbuffers::Offset<DamageVec> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DamageVec>(end);
    return o;
  }
};

inline flatbuffers::Offset<DamageVec> CreateDamageVec(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Damage>>> damagevector = 0) {
  DamageVecBuilder builder_(_fbb);
  builder_.add_damagevector(damagevector);
  return builder_.Finish();
}

inline flatbuffers::Offset<DamageVec> CreateDamageVecDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Damage>> *damagevector = nullptr) {
  return FB::CreateDamageVec(
      _fbb,
      damagevector ? _fbb.CreateVector<flatbuffers::Offset<Damage>>(*damagevector) : 0);
}

inline const FB::DamageVec *GetDamageVec(const void *buf) {
  return flatbuffers::GetRoot<FB::DamageVec>(buf);
}

inline const FB::DamageVec *GetSizePrefixedDamageVec(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FB::DamageVec>(buf);
}

inline bool VerifyDamageVecBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FB::DamageVec>(nullptr);
}

inline bool VerifySizePrefixedDamageVecBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FB::DamageVec>(nullptr);
}

inline void FinishDamageVecBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FB::DamageVec> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDamageVecBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FB::DamageVec> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FB

#endif  // FLATBUFFERS_GENERATED_FBDAMAGEVEC_FB_H_
