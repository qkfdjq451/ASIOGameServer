// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBMONSTERVEC_FB_H_
#define FLATBUFFERS_GENERATED_FBMONSTERVEC_FB_H_

#include "flatbuffers/flatbuffers.h"

#include "FB_generated.h"
#include "FB_Monster_generated.h"

namespace FB {

struct MonsterVec;

struct MonsterVec FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MONVECTOR = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Monster>> *monvector() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Monster>> *>(VT_MONVECTOR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MONVECTOR) &&
           verifier.Verify(monvector()) &&
           verifier.VerifyVectorOfTables(monvector()) &&
           verifier.EndTable();
  }
};

struct MonsterVecBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_monvector(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Monster>>> monvector) {
    fbb_.AddOffset(MonsterVec::VT_MONVECTOR, monvector);
  }
  explicit MonsterVecBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MonsterVecBuilder &operator=(const MonsterVecBuilder &);
  flatbuffers::Offset<MonsterVec> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MonsterVec>(end);
    return o;
  }
};

inline flatbuffers::Offset<MonsterVec> CreateMonsterVec(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Monster>>> monvector = 0) {
  MonsterVecBuilder builder_(_fbb);
  builder_.add_monvector(monvector);
  return builder_.Finish();
}

inline flatbuffers::Offset<MonsterVec> CreateMonsterVecDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Monster>> *monvector = nullptr) {
  return FB::CreateMonsterVec(
      _fbb,
      monvector ? _fbb.CreateVector<flatbuffers::Offset<Monster>>(*monvector) : 0);
}

inline const FB::MonsterVec *GetMonsterVec(const void *buf) {
  return flatbuffers::GetRoot<FB::MonsterVec>(buf);
}

inline const FB::MonsterVec *GetSizePrefixedMonsterVec(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FB::MonsterVec>(buf);
}

inline bool VerifyMonsterVecBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FB::MonsterVec>(nullptr);
}

inline bool VerifySizePrefixedMonsterVecBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FB::MonsterVec>(nullptr);
}

inline void FinishMonsterVecBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FB::MonsterVec> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMonsterVecBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FB::MonsterVec> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FB

#endif  // FLATBUFFERS_GENERATED_FBMONSTERVEC_FB_H_
