// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBSLOT_FB_H_
#define FLATBUFFERS_GENERATED_FBSLOT_FB_H_

#include "flatbuffers/flatbuffers.h"

#include "FB_generated.h"

namespace FB {

struct Slot;

struct Slot FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SLOTNUMBER = 4,
    VT_ITEMCODE = 6
  };
  int32_t slotNumber() const {
    return GetField<int32_t>(VT_SLOTNUMBER, 0);
  }
  int32_t itemCode() const {
    return GetField<int32_t>(VT_ITEMCODE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SLOTNUMBER) &&
           VerifyField<int32_t>(verifier, VT_ITEMCODE) &&
           verifier.EndTable();
  }
};

struct SlotBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_slotNumber(int32_t slotNumber) {
    fbb_.AddElement<int32_t>(Slot::VT_SLOTNUMBER, slotNumber, 0);
  }
  void add_itemCode(int32_t itemCode) {
    fbb_.AddElement<int32_t>(Slot::VT_ITEMCODE, itemCode, 0);
  }
  explicit SlotBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SlotBuilder &operator=(const SlotBuilder &);
  flatbuffers::Offset<Slot> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Slot>(end);
    return o;
  }
};

inline flatbuffers::Offset<Slot> CreateSlot(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t slotNumber = 0,
    int32_t itemCode = 0) {
  SlotBuilder builder_(_fbb);
  builder_.add_itemCode(itemCode);
  builder_.add_slotNumber(slotNumber);
  return builder_.Finish();
}

inline const FB::Slot *GetSlot(const void *buf) {
  return flatbuffers::GetRoot<FB::Slot>(buf);
}

inline const FB::Slot *GetSizePrefixedSlot(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FB::Slot>(buf);
}

inline bool VerifySlotBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FB::Slot>(nullptr);
}

inline bool VerifySizePrefixedSlotBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FB::Slot>(nullptr);
}

inline void FinishSlotBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FB::Slot> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSlotBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FB::Slot> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FB

#endif  // FLATBUFFERS_GENERATED_FBSLOT_FB_H_
