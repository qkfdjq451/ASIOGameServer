// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBPORTAL_FB_H_
#define FLATBUFFERS_GENERATED_FBPORTAL_FB_H_

#include "flatbuffers/flatbuffers.h"

#include "FB_generated.h"

namespace FB {

struct Portal;

struct Portal FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CURRENTMAPCODE = 4,
    VT_GATENUMBER = 6,
    VT_DESTINATIONMAPCODE = 8,
    VT_DESTPOSITION = 10
  };
  int32_t currentMapCode() const {
    return GetField<int32_t>(VT_CURRENTMAPCODE, 0);
  }
  int32_t gateNumber() const {
    return GetField<int32_t>(VT_GATENUMBER, 0);
  }
  int32_t destinationMapCode() const {
    return GetField<int32_t>(VT_DESTINATIONMAPCODE, 0);
  }
  const Vec3 *destPosition() const {
    return GetStruct<const Vec3 *>(VT_DESTPOSITION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CURRENTMAPCODE) &&
           VerifyField<int32_t>(verifier, VT_GATENUMBER) &&
           VerifyField<int32_t>(verifier, VT_DESTINATIONMAPCODE) &&
           VerifyField<Vec3>(verifier, VT_DESTPOSITION) &&
           verifier.EndTable();
  }
};

struct PortalBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_currentMapCode(int32_t currentMapCode) {
    fbb_.AddElement<int32_t>(Portal::VT_CURRENTMAPCODE, currentMapCode, 0);
  }
  void add_gateNumber(int32_t gateNumber) {
    fbb_.AddElement<int32_t>(Portal::VT_GATENUMBER, gateNumber, 0);
  }
  void add_destinationMapCode(int32_t destinationMapCode) {
    fbb_.AddElement<int32_t>(Portal::VT_DESTINATIONMAPCODE, destinationMapCode, 0);
  }
  void add_destPosition(const Vec3 *destPosition) {
    fbb_.AddStruct(Portal::VT_DESTPOSITION, destPosition);
  }
  explicit PortalBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PortalBuilder &operator=(const PortalBuilder &);
  flatbuffers::Offset<Portal> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Portal>(end);
    return o;
  }
};

inline flatbuffers::Offset<Portal> CreatePortal(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t currentMapCode = 0,
    int32_t gateNumber = 0,
    int32_t destinationMapCode = 0,
    const Vec3 *destPosition = 0) {
  PortalBuilder builder_(_fbb);
  builder_.add_destPosition(destPosition);
  builder_.add_destinationMapCode(destinationMapCode);
  builder_.add_gateNumber(gateNumber);
  builder_.add_currentMapCode(currentMapCode);
  return builder_.Finish();
}

inline const FB::Portal *GetPortal(const void *buf) {
  return flatbuffers::GetRoot<FB::Portal>(buf);
}

inline const FB::Portal *GetSizePrefixedPortal(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FB::Portal>(buf);
}

inline bool VerifyPortalBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FB::Portal>(nullptr);
}

inline bool VerifySizePrefixedPortalBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FB::Portal>(nullptr);
}

inline void FinishPortalBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FB::Portal> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPortalBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FB::Portal> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FB

#endif  // FLATBUFFERS_GENERATED_FBPORTAL_FB_H_
