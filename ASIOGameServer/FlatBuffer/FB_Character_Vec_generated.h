// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBCHARACTERVEC_FB_H_
#define FLATBUFFERS_GENERATED_FBCHARACTERVEC_FB_H_

#include "flatbuffers/flatbuffers.h"

#include "FB_generated.h"
#include "FB_Character_generated.h"

namespace FB {

struct CharacterVec;

struct CharacterVec FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CHARVECTOR = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Character>> *charvector() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Character>> *>(VT_CHARVECTOR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHARVECTOR) &&
           verifier.Verify(charvector()) &&
           verifier.VerifyVectorOfTables(charvector()) &&
           verifier.EndTable();
  }
};

struct CharacterVecBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_charvector(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Character>>> charvector) {
    fbb_.AddOffset(CharacterVec::VT_CHARVECTOR, charvector);
  }
  explicit CharacterVecBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CharacterVecBuilder &operator=(const CharacterVecBuilder &);
  flatbuffers::Offset<CharacterVec> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CharacterVec>(end);
    return o;
  }
};

inline flatbuffers::Offset<CharacterVec> CreateCharacterVec(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Character>>> charvector = 0) {
  CharacterVecBuilder builder_(_fbb);
  builder_.add_charvector(charvector);
  return builder_.Finish();
}

inline flatbuffers::Offset<CharacterVec> CreateCharacterVecDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Character>> *charvector = nullptr) {
  return FB::CreateCharacterVec(
      _fbb,
      charvector ? _fbb.CreateVector<flatbuffers::Offset<Character>>(*charvector) : 0);
}

inline const FB::CharacterVec *GetCharacterVec(const void *buf) {
  return flatbuffers::GetRoot<FB::CharacterVec>(buf);
}

inline const FB::CharacterVec *GetSizePrefixedCharacterVec(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FB::CharacterVec>(buf);
}

inline bool VerifyCharacterVecBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FB::CharacterVec>(nullptr);
}

inline bool VerifySizePrefixedCharacterVecBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FB::CharacterVec>(nullptr);
}

inline void FinishCharacterVecBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FB::CharacterVec> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCharacterVecBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FB::CharacterVec> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FB

#endif  // FLATBUFFERS_GENERATED_FBCHARACTERVEC_FB_H_
